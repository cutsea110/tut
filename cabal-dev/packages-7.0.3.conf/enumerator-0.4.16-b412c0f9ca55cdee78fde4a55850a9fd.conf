name: enumerator
version: 0.4.16
id: enumerator-0.4.16-b412c0f9ca55cdee78fde4a55850a9fd
license: MIT
copyright: 2010-2011 John Millikin, 2011 Mikhail Vorozhtsov
maintainer: jmillikin@gmail.com
stability: experimental
homepage: https://john-millikin.com/software/enumerator/
package-url:
description: Typical buffer&#x2013;based incremental I/O is based around a single loop,
             which reads data from some source (such as a socket or file), transforms
             it, and generates one or more outputs (such as a line count, HTTP
             responses, or modified file). Although efficient and safe, these loops are
             all single&#x2013;purpose; it is difficult or impossible to compose
             buffer&#x2013;based processing loops.
             .
             Haskell&#x2019;s concept of &#x201C;lazy I/O&#x201D; allows pure code to
             operate on data from an external source. However, lazy I/O has several
             shortcomings. Most notably, resources such as memory and file handles can
             be retained for arbitrarily long periods of time, causing unpredictable
             performance and error conditions.
             .
             Enumerators are an efficient, predictable, and safe alternative to lazy
             I/O. Discovered by Oleg Kiselyov, they allow large datasets to be processed
             in near&#x2013;constant space by pure code. Although somewhat more complex
             to write, using enumerators instead of lazy I/O produces more correct
             programs.
             .
             This library contains an enumerator implementation for Haskell, designed to
             be both simple and efficient. Three core types are defined, along with
             numerous helper functions:
             .
             * /Iteratee/: Data sinks, analogous to left folds. Iteratees consume
             a sequence of /input/ values, and generate a single /output/ value.
             Many iteratees are designed to perform side effects (such as printing to
             @stdout@), so they can also be used as monad transformers.
             .
             * /Enumerator/: Data sources, which generate input sequences. Typical
             enumerators read from a file handle, socket, random number generator, or
             other external stream. To operate, enumerators are passed an iteratee, and
             provide that iteratee with input until either the iteratee has completed its
             computation, or EOF.
             .
             * /Enumeratee/: Data transformers, which operate as both enumerators and
             iteratees. Enumeratees read from an /outer/ enumerator, and provide the
             transformed data to an /inner/ iteratee.
category: Data, Enumerator
author: John Millikin <jmillikin@gmail.com>
exposed: True
exposed-modules: Data.Enumerator Data.Enumerator.Binary
                 Data.Enumerator.Internal Data.Enumerator.IO Data.Enumerator.List
                 Data.Enumerator.Text Data.Enumerator.Trans
hidden-modules: Data.Enumerator.Compatibility Data.Enumerator.Util
import-dirs: /home/cutsea110/devel/yesod/tut/cabal-dev//lib/enumerator-0.4.16/ghc-7.0.3
library-dirs: /home/cutsea110/devel/yesod/tut/cabal-dev//lib/enumerator-0.4.16/ghc-7.0.3
hs-libraries: HSenumerator-0.4.16
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.3.1.0-1554f26e1cc1c87f47464e927dddbd20
         bytestring-0.9.1.10-100304f3bd3acb14c76d97b6a012f091
         containers-0.4.0.0-8781485edb2ac0db733a9f9c72e27945
         text-0.11.1.9-03c4587b965aaf42fe75b60a37754c28
         transformers-0.2.2.0-7341f4d82874561a0431f4b264319cf8
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/cutsea110/devel/yesod/tut/cabal-dev//share/doc/enumerator-0.4.16/html/enumerator.haddock
haddock-html: /home/cutsea110/devel/yesod/tut/cabal-dev//share/doc/enumerator-0.4.16/html
